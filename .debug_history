#V2
print (/ (* D_P (* D D)) (* u4 (* old-x-bal old-y-bal)))
s
print new D_P
print new_D_P
s
print new_D_P
print new_D_numerator
s
print new_D_denominator
s
print new_D
s
n
s
n
s
n
print D_0
print D_1
print (get shares-total pair)
s
print (is-eq current-total-shares u0)
print current-total-shares
print (- D_1 D_0)
print D_1
s
print future-total-shares
print D_0
print D_1
s
n
s
print D-info
s
n
print D_0
s
print x
print balance-x
print (+ x balance-x)
print y
print balance-y
print A_COEF
s
print S
s
print D-info
s
n
s
print who
s
print token-x-trait
s
print rewardCycle
print who
s
print token-x
s
print pair
s
print pair
s
n
print cycleFeeData
s
n
print totalStakingData
s
n
print userStakingData
s
n
s
print reward-cycle
print following-cycle
s
print following-cycle
s
n
s
print (is-eq claimed true)
print (>= rewardCycle this-cycle)
print ((list user-x-rewards-proportional user-y-rewards-proportional lp-claim xbtc-claim))
print (list user-x-rewards-proportional user-y-rewards-proportional lp-claim xbtc-claim)
s
print (element-at list-of-cycle-rewards u0)
print (unwrap! (element-at list-of-cycle-rewards u0) PANIC_ERR)
print (unwrap! (unwrap! (element-at list-of-cycle-rewards u0) PANIC_ERR) PANIC_ERR)
print (element-at list-of-cycle-rewards u1)
print (unwrap! (element-at list-of-cycle-rewards u2) PANIC_ERR)
print list-of-cycle-rewards
print (element-at list-of-cycle-rewards u1)
print (element-at list-of-cycle-rewards u0)
print (match (element-at list-of-cycle-rewards u0) values (unwrap! values PANIC_ERR) (list u0 u0 u0 u0))
print (match (element-at list-of-cycle-rewards u1) values (unwrap! values PANIC_ERR) (list u0 u0 u0 u0))
s
print list0
q
n
